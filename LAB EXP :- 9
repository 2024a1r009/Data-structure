//circular linked list
#include<stdio.h>
struct node* head;
struct node{
    int data;
    struct node* next;
};
/*struct node{
 int data;
    struct node* next;
}head=NULL;*/
struct node* createnode(int ele){
    struct node* newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=ele;
    newnode->next=NULL;
    return newnode;
}

void insertatthebeg(int ele){
   struct node* newnode=createnode(ele);
   if(head==NULL){
    head=newnode;
    newnode->next=head;
   }
   else{
    newnode->next=head;
   struct node*p=head;
while(p->next!=head){
    p=p->next;
}
p->next=newnode;
head=newnode;
}
printf("Node inserted\n");
}

void insertattheend(int ele){
    struct node* newnode=createnode(ele);
if(head==NULL){
  head=newnode;
  head->next=head;;
}
else{
    struct node* p= head;
    while(p->next!=head){
        p=p->next;
    } 
    p->next=newnode;
    newnode->next=head;

}
}
void insertatanypos(int ele,int pos){
    struct node* newnode=createnode(ele);
    if(head==NULL ){
       printf("empty\n");
    }
    else if(pos==1){
        insertatthebeg(ele);
    }
    else{
        struct node* p= head;
        
            int i=1;
          
            while(i<=pos- 1 && p->next!=head){
               p=p->next;
               i++;
            }
            if(p->next!=head && pos>0){
            struct node* y=createnode(ele);
            y->next=p->next;
            p->next=newnode;
            printf("Node insrerted");
            }
            else{
                printf("Invalid position\n");
            }
  
         
    }
}

void deleteatthebeg(){
    if(head==NULL){
        printf("empty\n");
    }
    else if(head->next==head){//if list contain only single node
        struct node* temp=head;
        head=NULL;
        free(temp);
            }
    else{ 
      struct node*t=head;
      while(t->next!=head){
        t=t->next;
      }
      struct node* p=head;
      head=head->next;
      t->next=head;
      free(p);
      printf("Element deleted\n");
    }

}
void deleteattheend(){
    if(head==NULL){
        printf("empty\n");
    }
    else if(head->next==head){//if list contain only single node
        struct node* temp=head;
        head=NULL;
        free(temp);
            }
    else{// if list contain more than 1 nodes
        struct node*t=head;
        while(t->next->next!=head){
            t=t->next;

        }
        free(t->next);  
        t->next=head;
        printf("Node deleted\n");
        
    }
}
void deleteNodefromanypos(int pos)
  {
      if (head == NULL)
          printf("list is empty !!!!\n");
      else if (pos == 1)
          deleteNodefrombeg();
      else
      {
          struct node *temp = head;
          int i = 1;
          while (i < pos - 1 && temp->next !=head)
          {
              i++;
              temp = temp->next;
          }
          if (temp->next != head && i > 0)
          {
             struct node *t = temp->next;
              temp->next = temp->next->next;
              free(t);
              printf("node deleted !!!\n");
          }
          else
              printf("invalid position !\n");
      }
  }
void search(int target){
if(head==NULL){
    printf("list is empty\n");
}
else{
    struct node* temp=head;
    do{
        if(target==temp->data){
            printf("Found\n");
            return;
        }
        temp=temp->next;

    }
    while(temp!=head);
    printf("Not found\n");
}
}

void display(){
if(head==NULL){
    printf("Empty\n");
}
else{
    struct node* temp=head;
    do{
        printf("%d ",temp->data);
        temp=temp->next;

    }
    while(temp!=head);
    
}
}

int main(){
    while (1)
    {
        printf("--SINGLY LINKED LIST--\n");
        printf("1.Insert node in beginning\n");
        printf("2.Insert node at end\n");
        printf("3.Insert node at  any position\n ");
        printf("4.Delete node from beginning\n");
        printf("5.Delete node from end\n");
        printf("6.Delete node from any position\n");
        printf("7.Search element in list\n");
        printf("8.Sort elements\n");
        printf("9.Display elements\n");
        printf("10.Exit\n\n");
        int choice, value, pos;
        printf("Enter choice:");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter the value: ");
            scanf("%d", &value);
            insertatthebeg(value);
          break;
      case 2:
          printf("Enter the value: ");
          scanf("%d", &value);
          insertattheend(value);
          break;
      case 3:
          printf("Enter the value: ");
          scanf("%d", &value);
          printf("enter position: ");
          scanf("%d", &pos);
          insertatanyposition(value, pos);
          break;
      case 4:
       deleteNodefrombeg();
          break;
      case 5:
         deleteNodefromend();
          break;
      case 6:
          printf("Enter position: ");
          scanf("%d", &pos);
          break;
      case 7:
         printf("Enter the value: ");
          scanf("%d", &value);
          break;
      case 8:
      printf("Enter the value: ");
      scanf("%d", &value);
      break;
        search(value);
          break;
      case 9:
         display();
          break;
          case 10:
              exit(0);
          default:
              printf("Invalid choice !!!!\n"); 
          }
          printf("\n");}

}
