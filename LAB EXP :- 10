//stack implementation 
#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *next;
};
struct node* top=NULL;
void push(int value){
struct node *temp=(struct node*)malloc(sizeof(struct node));
if(temp==NULL){
    printf("Stack overflow!!!\n");
}
else{
      temp->data=value;
      temp->next=top;
      top=temp;
      printf("Element %d push in the stack!!!\n",value);
}
}
int pop(){
if(top==NULL){
    printf("Stack underflow!!\n");
    return -1;
}
else{
    struct node* temp=top;
    top=top->next;
    int val=temp->data;
    free(temp);
    return val;
}
}
int peek(){
return (top!=NULL)?top->data:-1;
}
void show(){
if(top==NULL){
    printf("Stack is empty!!\n");

}
else{
    printf("Stack elements are = \n");
    struct node * temp =top;
    while(temp!=NULL){
        printf("%d\n",temp->data);
        temp=temp->next;
    }
}
}
int main(){
    while(1){
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. peek\n");
        printf("4. Display\n");
        printf("5. exit\n");
        int choice,val,res;
        printf("Enter choice = ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
            printf("Enter value = ");
            scanf("%d",&val);
            push(val);
            break;

            case 2:
            res=pop();
            if(res!=-1)
            printf("%d pop from the stack!!!\n",res);
            break;
            
            case 3:
            res=peek();
            if(res!=-1)
            printf("%d\n",res);
else{
    printf("stack is empty!!\n");
}
            break;
            case 4:
            show();
            break;
            case 5:
           exit(0);
           default:
           printf("Invalid choice!!!\n");

        }
    }
}
